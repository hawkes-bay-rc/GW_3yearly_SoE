mutate(
significance_maxmin = ifelse(!is.na(p_value_maxmin) & p_value_maxmin >= 0.05, "non-sig", "sig"),
direction_maxmin = ifelse(!is.na(tau_maxmin) & tau_maxmin > 0, "positive",
ifelse(!is.na(tau_maxmin) & tau_maxmin < 0, "negative", "no trend"))
)
return(results)
}
# Run Kendall trend tests for Seasonal Variation (SV) for all periods
MK_all_SV         <- run_kendall_SV(All_GL1)
MK_SV_1984_1994   <- run_kendall_SV(GL1984_1994)
MK_SV_1994_2004   <- run_kendall_SV(GL1994_2004)
MK_SV_2004_2014   <- run_kendall_SV(GL2004_2014)
MK_SV_2014_2024   <- run_kendall_SV(GL2014_2024)
MK_SV_1984_2004   <- run_kendall_SV(GL1984_2004)
MK_SV_1994_2014   <- run_kendall_SV(GL1994_2014)
MK_SV_2004_2024   <- run_kendall_SV(GL2004_2024)
MK_SV_1994_2024   <- run_kendall_SV(GL1994_2024)
MK_SV_1984_2014   <- run_kendall_SV(GL1984_2014)
MK_SV_1984_2024   <- run_kendall_SV(GL1984_2024)
#Combine results
#10year
MK_SV_1984_1994$period="1984_1994"
MK_SV_1994_2004$period="1994_2004"
MK_SV_2004_2014$period="2004_2014"
MK_SV_2014_2024$period="2014_2024"
#20year
MK_SV_1984_2004$period="1984_2004"
MK_SV_1994_2014$period="1994_2014"
MK_SV_2004_2024$period="2004_2024"
#30year
MK_SV_1984_2014$period="1984_2014"
MK_SV_1994_2024$period="1994_2024"
#40year
MK_SV_1984_2024$period="1984_2024"
#full
MK_all_SV$period="Full"
MK_SV_combined <- rbind(
#10yr
MK_SV_1984_1994,
MK_SV_1994_2004,
MK_SV_2004_2014,
MK_SV_2014_2024,
#20yr
MK_SV_1984_2004,
MK_SV_1994_2014,
MK_SV_2004_2024,
#30yr
MK_SV_1984_2014,
MK_SV_1994_2024,
#40yr
MK_SV_1984_2024,
#All
MK_all_SV
) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant", remove=FALSE) %>%
sf::st_transform(2193)
MK_SV_combined <- rbind(
#10yr
MK_SV_1984_1994,
MK_SV_1994_2004,
MK_SV_2004_2014,
MK_SV_2014_2024,
#20yr
MK_SV_1984_2004,
MK_SV_1994_2014,
MK_SV_2004_2024,
#30yr
MK_SV_1984_2014,
MK_SV_1994_2024,
#40yr
MK_SV_1984_2024,
#All
MK_all_SV
) %>%
left_join(WellStor_sf_NZTM, by = "well") %>%
st_as_sf()
selection <- MK_SV_combined %>%
sf::st_intersection(allbasins) %>%
sf::st_drop_geometry()
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Minor aquifers"))) %>%
mutate(sig_1 = case_when(
significance_maxmin == "non-sig" ~ "non-sig",
direction_maxmin == "positive" ~ "positive",
direction_maxmin == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_1 = factor(sig_1, levels = c("positive", "negative", "non-sig", "check")))
# Create the "Tables" directory inside "3_State_analysis" if it doesn't exist
dir.create(file.path(rprojroot::find_rstudio_root_file(), "5_Trend_analysis", "Results_tables"),
recursive = TRUE, showWarnings = FALSE)
# Export the Mann-Kendall results to CSV in the newly created folder
write.table(MK_SV_combined_1,
file = file.path(rprojroot::find_rstudio_root_file(), "5_Trend_analysis", "Results_tables",
paste0(Sys.Date(), "_SV_Mann_Kendall_results.csv")),
sep = ",", row.names = FALSE, quote = FALSE)
# Define folder path and ensure it exists
file_path <- file.path(rprojroot::find_rstudio_root_file(),
"5_Trend_analysis", "Results_shapefiles",
paste0(Sys.Date(), "_MK_SV_combined_sf.shp"))
dir.create(dirname(file_path), recursive = TRUE, showWarnings = FALSE)
#Create and write the shapefile
MK_SV_combined_sf <- MK_SV_combined_1 %>%
left_join(WellStor_sf_NZTM) %>%
st_as_sf() %>%
sf::st_write(file_path, delete_layer = TRUE)
# This table counts the number of significant and insignificant trends by well
Trend_summary_by_well_aquifer1 <- MK_SV_combined_1 %>%
group_by(period, area, sig_1) %>%
summarise(n = n_distinct(well), .groups = "drop") %>%
pivot_wider(names_from = period, values_from = n, values_fill = list(n = 0))
#This table counts the number of wells tested for each period
No_unique_wells_tests <- MK_SV_combined_1 %>%
group_by(period, area) %>%
summarise(n = n_distinct(well), .groups = "drop") %>%
pivot_wider(names_from = period, values_from = n, values_fill = list(n = 0))
# This table calculates the average rate of change of significant trends
MK_slope_mean1 <- MK_SV_combined_1 %>%
filter(significance_maxmin == "sig", !is.na(sen_slope_maxmin)) %>%
group_by(period, area) %>%
summarise(n = round(mean(sen_slope_maxmin, na.rm = FALSE), digits = 5), .groups = "drop") %>%
pivot_wider(names_from = period, values_from = n, values_fill = list(n = NA))
# List of areas to process
areas_to_process <- c("Heretaunga Plains", "Ruataniwha Plains", "Minor aquifers")
# Initialise a list to store results
seasonal_area_tables <- list()
for (area_name in areas_to_process) {
# Filter and Process Data for the Current Area
seasonal_area_data <- MK_SV_combined_1 %>%
filter(significance_maxmin == "sig", area == area_name) %>%
group_by(period) %>%  # No 'month' since it's not available
summarise(
mean_annual_slope = round(mean(sen_slope_maxmin, na.rm = TRUE), digits = 2),
.groups = 'drop'
)
# Calculate the Number of Wells Sampled per Period
well_counts <- MK_SV_combined_1 %>%
filter(significance_maxmin == "sig", area == area_name) %>%
group_by(period) %>%
summarise(wells = n_distinct(well))
# Merge the Well Counts Back into the Area Data
seasonal_area_data <- seasonal_area_data %>%
left_join(well_counts, by = "period")
# Store Processed Data
seasonal_area_tables[[area_name]] <- seasonal_area_data
# Print message indicating completion
message("Seasonal Kendall data processed for area: ", area_name)
}
# Define base directory dynamically
base_dir <- file.path(rprojroot::find_rstudio_root_file(), "5_Trend_analysis", "Results_Plots")
# Ensure the base directory exists
dir.create(base_dir, recursive = TRUE, showWarnings = FALSE)
# Function to create subdirectories dynamically
get_plot_path <- function(subfolder) {
dir_path <- file.path(base_dir, subfolder)
dir.create(dir_path, recursive = TRUE, showWarnings = FALSE)
return(dir_path)
}
# Function to process and plot data
process_and_plot <- function(data, results, period_label, output_dir) {
df <- data %>%
dplyr::inner_join(results, by = c("well")) %>%
dplyr::mutate(pvalue1 = round(p_value_maxmin, 3)) %>%
dplyr::mutate(period.x1 = paste0(period.x, " P Value = ", pvalue1)) %>%
dplyr::mutate(sig = as.character(significance_maxmin)) %>%
dplyr::filter(sig == "sig")
plot_per_well <- function(well_ids) {
df_well <- df %>%
dplyr::filter(well == well_ids)
g <- ggplot(df_well, aes(x = datetime, y = max_min_diff)) +
geom_point(size = 1) +
geom_smooth() +
facet_wrap(~well, scales = "free") +
ylab("Groundwater levels (m)") +
xlab("Date") +
ggtitle(paste(well_ids, period_label, sep = " "))
# Save the plot in the dynamically created folder
file_name <- file.path(output_dir, paste0(well_ids, ".png"))
cowplot::save_plot(file_name, g)
print(paste0("Saved plot for well ", well_ids, " in ", output_dir))
}
# Generate plots for each well using the label1 column
well_ids <- unique(df$well)
for (i in seq_along(well_ids)) {
plot_per_well(well_ids[i])
}
}
# Define analysis periods and datasets using the names from the first part of your command
periods <- list(
"1984-1994" = list(GL1984_1994, MK_SV_1984_1994),
"1994-2004" = list(GL1994_2004, MK_SV_1994_2004),
"2004-2014" = list(GL2004_2014, MK_SV_2004_2014),
"2014-2024" = list(GL2014_2024, MK_SV_2014_2024),
"1984-2004" = list(GL1984_2004, MK_SV_1984_2004),
"1994-2014" = list(GL1994_2014, MK_SV_1994_2014),
"2004-2024" = list(GL2004_2024, MK_SV_2004_2024),
"1984-2014" = list(GL1984_2014, MK_SV_1984_2014),
"1994-2024" = list(GL1994_2024, MK_SV_1994_2024),
"1984-2024" = list(GL1984_2024, MK_SV_1984_2024)
)
# Process and save plots for each period
for (period in names(periods)) {
dataset <- periods[[period]]
# Create output folder with a name like "1984_1994_GL_plots_SV"
output_folder <- get_plot_path(paste0(gsub("-", "_", period), "_GL_plots_SV"))
process_and_plot(dataset[[1]], dataset[[2]], period, output_folder)
}
#Graph results
# Define colours for the plot
SoE_colours <- c("#00b189", "#008ca5", "#f15d49", "#92a134", "#00a651", "#00b1b1", "#eebd1c")
# This bar plot shows the number of trends detected for each period
MK_SV_summary_plot <- MK_SV_combined_1 %>%
filter(significance_maxmin == "sig", sig_1 != "check") %>%
select(area, sig_1, period) %>%
group_by(area, period, sig_1) %>%
summarise(value = n(), .groups = "drop") %>%
mutate(
# Recode "positive" to "increasing" and "negative" to "decreasing"
sig_1 = recode(sig_1, positive = "increasing", negative = "decreasing"),
# Define the factor levels explicitly so both categories are shown
sig_1 = factor(sig_1, levels = c("increasing", "decreasing")),
period_group = case_when(
period %in% c("1984_1994", "1994_2004", "2004_2014", "2014_2024") ~ "10 Year Period",
period %in% c("1984_2004", "1994_2014", "2004_2024") ~ "20 Year Period",
period %in% c("1984_2014", "1994_2024") ~ "30 Year Period",
period == "1984_2024" ~ "40 Year Period",
period == "Full" ~ "All periods",
TRUE ~ "Other"
)
) %>%
ggplot(aes(x = sig_1, y = value, fill = sig_1)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(area ~ period_group + period, scales = "free") +
scale_x_discrete(drop = FALSE) +  # Ensures that both factor levels appear on each plot
scale_fill_manual(values = SoE_colours) +
theme(
legend.position = "bottom",
legend.title = element_blank(),
strip.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
labs(
y = "Number of trends detected",
x = "Trend direction",
title = "Number of Statistically Significant Trends Detected by period"
)
# Define the base directory dynamically using the RStudio project root
base_dir <- file.path(rprojroot::find_rstudio_root_file(), "5_Trend_analysis", "Results_Plots", "Summary_Plots")
# Ensure the base directory exists
dir.create(base_dir, recursive = TRUE, showWarnings = FALSE)
# Define file path for saving
file_path <- file.path(base_dir, "MK_SV_summary_plot.png")
# Save the plot
ggsave(file_path, MK_SV_summary_plot, dpi = 300)
MK_SV_slope <-  MK_SV_combined_1 %>%
select(well,sig_1, sen_slope_maxmin,period, area,x,y)
MK_SV_slope <-  MK_SV_combined_1 %>%
select(well,sig_1, sen_slope_maxmin,period, area)
# Filter for positive and negative trends and rename them
df_filtered <- MK_SV_slope %>%
filter(sig_1 %in% c("positive", "negative")) %>%
mutate(sig_1 = recode(sig_1, positive = "increasing", negative = "decreasing"))
# Create the boxplot, faceted by area
ggplot(df_filtered, aes(x = sig_1, y = sen_slope_maxmin, fill = period)) +
geom_boxplot(color = "black", outlier.shape = NA, outlier.size = 2) +
facet_wrap(~ area) +
scale_fill_brewer(palette = "Paired") +
labs(
title = " ",
x = "",
y = "Sen's Slope"
) +
theme_classic() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width = unit(2, "cm"),
legend.spacing.x = unit(0.5, 'cm'),
legend.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5, size = 12),
axis.text.y = element_text(size = 12),
strip.text = element_text(face = "plain", size = 12),  # 📐 Make facet titles clearer
strip.background = element_rect(fill = "lightgrey", color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.major.x = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),  # Dark border around entire plot
axis.line.y.right = element_line(color = "black", size = 0.5)  # 🔹 Dark right y-axis line
) +
guides(fill = guide_legend(nrow = 2))
#This plots maps showing seasonal variation ranges
# Plot seasonal variation
All_GL1_sf <- All_GL1 %>%
dplyr::filter(year >2020) %>%
dplyr::select(well, year, max_level,min_level,max_min_diff) %>%
dplyr::left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant") %>%
sf::st_transform(2193)
# Plot seasonal variation
All_GL1_sf <- All_GL1 %>%
dplyr::filter(year >2020) %>%
dplyr::select(well, year, max_level,min_level,max_min_diff) %>%
dplyr::left_join(WellStor_sf_NZTM) %>%
sf::st_as_sf()
#This plots maps showing seasonal variation ranges
# Plot seasonal variation
All_GL1_sf <- All_GL1 %>%
dplyr::filter(year >2020) %>%
dplyr::select(well, year, max_level,min_level,max_min_diff) %>%
dplyr::left_join(WellStor_sf_NZTM) %>%
sf::st_as_sf()
# Calculate natural breaks (Jenks breaks)
breaks <- classInt::classIntervals(All_GL1_sf$max_min_diff, n = 5, style = "jenks")$brks
# Set minimum and maximum bubble sizes
min_size <- 1.8   # Set your desired minimum size
max_size <- 2  # Set your desired maximum size
tmap::tm_shape(allbasins)+
tmap::tm_fill()+
tmap::tm_shape(Quaternary_aquifers,)+
tmap::tm_fill(col = "Aquifer",
palette = "darkseagreen3",
border.col = "white", lwd = 2, alpha = 0.5,
title = "",
labels = "Quaternary sediments")+
tmap::tm_shape(bb_box)+
tmap::tm_lines(col = "black", lwd = 1,lty = "solid")+
tmap::tm_text("Name", size = 0.8, xmod = 3.3, ymod=0.6)+
tmap::tm_shape(All_GL1_sf)+
tmap::tm_bubbles(size = "max_min_diff",
col = "max_min_diff",
breaks = breaks,
palette = "-RdBu",
scale = c(min_size, max_size))+
tmap::tm_facets(by='year',free.coords = TRUE)+
tmap::tm_legend(title.position =c("left", "bottom"),
title.size=5,
scale=1,
legend.text.size = 1.1)+
tmap::tm_layout(legend.outside = T,
legend.outside.position = "bottom",
legend.text.size = 2)
# Define base directory dynamically for saving plots
save_dir <- file.path(
rprojroot::find_rstudio_root_file(),
"5_Trend_analysis",
"Results_Maps_MK"
)
# Ensure the directory exists
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# Define a mapping of areas to their respective shapefiles
area_shapefiles <- list(
"Heretaunga Plains" = HP_plains_sf,
"Ruataniwha Plains" = RP_plains_sf,
"Minor aquifers"    = Regional_boundary_sf
)
# Preprocess data: create 'trend_sig', round the slope, and create a label column
MK_SV_combined_sf <- MK_SV_combined_sf %>%
mutate(
trend_sig = case_when(
significance_maxmin == "sig"     & direction_maxmin == "positive"   ~ "sig_up",
significance_maxmin == "sig"     & direction_maxmin == "negative" ~ "sig_down",
significance_maxmin == "non-sig" & direction_maxmin == "postive"   ~ "non-sig_up",
significance_maxmin == "non-sig" & direction_maxmin == "negative" ~ "non-sig_down",
TRUE ~ NA_character_
),
Annual_slope_rounded = round(sen_slope_maxmin, 3),  # Round slope to 3 decimals
slope_label = if_else(Annual_slope_rounded == 0, "<0.01", as.character(Annual_slope_rounded))
) %>%
filter(!is.na(trend_sig))  # Remove rows lacking a valid trend_sig
# Function to create and save facet plots for Seasonal Kendall results
create_mann_kendall_plots <- function(period, area, df, area_shapefiles, osm_type = "esri-shaded") {
# Retrieve the correct shapefile for this area
shape_sf <- area_shapefiles[[area]]
# Determine if the shapefile is polygon or line (for borders vs. lines)
is_polygon <- if (!is.null(shape_sf)) {
any(st_geometry_type(shape_sf) %in% c("POLYGON", "MULTIPOLYGON"))
} else {
FALSE
}
# If shapefile is available, read a basemap from OSM
base_map <- if (!is.null(shape_sf)) {
read_osm(shape_sf, type = osm_type, ext = 1.1)
} else {
NULL
}
# Filter the main dataframe by the given period & area
df_filtered <- df %>%
filter(period == !!period, area == !!area)
# If no valid data, skip
if (nrow(df_filtered) == 0) {
message(paste("⚠ No valid SK data for", area, "in period:", period, "- Skipping."))
return(NULL)
}
# Use static (plot) mode
tmap_mode("plot")
# Build the initial map
plot <- if (!is.null(base_map)) {
# Show base map plus the boundary shapefile
qtm(base_map) +
tm_shape(shape_sf) +
if (is_polygon) tm_borders() else tm_lines()
} else {
# No base map for some areas
tm_shape(df_filtered)
}
# Add point symbols, text labels, plus the main title & legends
plot <- plot +
tm_shape(df_filtered) +
tm_symbols(
shape = "trend_sig",
shapes = c("sig_up" = 24, "sig_down" = 25,
"non-sig_up" = 24, "non-sig_down" = 25),
col = "trend_sig",
palette = c("sig_up" = "blue", "sig_down" = "red",
"non-sig_up" = "black", "non-sig_down" = "black"),
size = 1,
legend.shape.show = FALSE,  # Hide auto shape legend
legend.col.show   = FALSE   # Hide auto colour legend
) +
tm_text(
text = "slope_label",  # Use the new slope_label column
size = 0.7,
col  = "black",
just = "left",
xmod = 0.5,
ymod = 0.5
) +
tm_layout(
panel.label.size   = 2,
panel.label.height = 1.5,
legend.show        = TRUE,
main.title         = paste("Mann Kendall Trends for", area,
"\n(", period, ")"),  # line break
main.title.position= "center",
main.title.size    = 1.5,
outer.margins      = c(0.1, 0.02, 0.02, 0.02)  # extra top margin for title
) +
# 1st legend for shapes
tm_add_legend(
type       = "symbol",
title      = " ",
labels     = c("Significant Up", "Significant Down",
"Non-significant Up", "Non-significant Down"),
shape      = c(24, 25, 24, 25),
col        = c("blue", "red", "black", "black"),
border.col = "black",
is.portrait= FALSE  # horizontal
) +
tm_add_legend(
type       = "symbol",
title      = " ",
labels     = c("Sen's slope (m/yr) in black text"),
shape      = c(24),
col        = "black",
border.col = "black",
is.portrait= TRUE  # horizontal
) +
tm_layout(
legend.outside          = TRUE,
legend.outside.position = "bottom",
legend.position         = c("center", "top"),
legend.stack            = "vertical",
legend.bg.col           = "white"
)
# Short name for saving
area_short <- case_when(
area == "Heretaunga Plains" ~ "HP",
area == "Ruataniwha Plains" ~ "RP",
area == "Minor aquifers"    ~ "MA",
TRUE ~ gsub(" ", "_", area)
)
# Output file path
filename <- file.path(save_dir, paste0(area_short, "_MK_", period, ".png"))
# Save the plot
tmap_save(plot, filename, width = 16, height = 10, units = "in", dpi = 100)
# Use Magick to remove white spaces by trimming the image
img <- image_read(filename)
img <- image_trim(img)
image_write(img, path = filename, format = "png")
message(paste("✅ SK Plot saved at:", filename))
}
# Define your periods and areas
periods <- c(
"1984_1994", "1994_2004", "2004_2014", "2014_2024",
"1984_2004", "1994_2014", "2004_2024", "1984_2014",
"1994_2024", "1984_2024"
)
areas <- c("Heretaunga Plains", "Ruataniwha Plains", "Minor aquifers")
# Loop through each period and area to generate facet plots
for (period in periods) {
for (area in areas) {
create_mann_kendall_plots(period, area, df = MK_SV_combined_sf, area_shapefiles)
}
}
