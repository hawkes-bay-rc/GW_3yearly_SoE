st_transform(2193) %>%
mutate(
basin = st_intersection(., basins) %>% pull(NAME),
ema = st_intersection(., ema) %>% pull(EMA)
) %>%
st_drop_geometry()
}
WellStor_attributes <- WellStor %>%
select(well, x, y) %>%
process_spatial_attributes(allbasins, EMA_sf)
# Spatial processing ------------------------------------------------------
process_spatial_attributes <- function(data, basins, ema) {
data %>%
st_as_sf(coords = c("x", "y"), crs = 27200, remove = FALSE) %>%
st_transform(2193) %>%
mutate(
# Handle basin intersection with left join
basin = st_intersects(., basins) %>%
as.data.frame() %>%
left_join(basins %>% mutate(col_id = row_number()), by = c("col_id" = "col_id")) %>%
pull(NAME),
# Handle EMA intersection with left join
ema = st_intersects(., ema) %>%
as.data.frame() %>%
left_join(ema %>% mutate(col_id = row_number()), by = c("col_id" = "col_id")) %>%
pull(EMA)
) %>%
st_drop_geometry() %>%
# Handle potential multiple matches by taking first match
group_by(well, x, y) %>%
summarize(
basin = first(na.omit(basin)),
ema = first(na.omit(ema)),
.groups = "drop"
)
}
WellStor_attributes <- WellStor %>%
select(well, x, y) %>%
process_spatial_attributes(allbasins, EMA_sf)
# Spatial processing ------------------------------------------------------
process_spatial_attributes <- function(data, basins, ema) {
data %>%
st_as_sf(coords = c("x", "y"), crs = 27200, remove = FALSE) %>%
st_transform(2193) %>%
mutate(
# Handle basin intersection with left join
basin = st_intersects(., basins) %>%
as.data.frame() %>%
left_join(basins %>% mutate(col_id = row_number()), by = c("col_id" = "col_id")) %>%
pull(NAME),
# Handle EMA intersection with left join
ema = st_intersects(., ema) %>%
as.data.frame() %>%
left_join(ema %>% mutate(col_id = row_number()), by = c("col_id" = "col_id")) %>%
pull(EMA)
) %>%
st_drop_geometry() %>%
# Handle potential multiple matches by taking first match
group_by(well, x, y) %>%
summarize(
basin = first(na.omit(basin)),
ema = first(na.omit(ema)),
.groups = "drop"
)
}
WellStor_attributes <- WellStor %>%
select(well, x, y) %>%
process_spatial_attributes(allbasins, EMA_sf)
# Create a numeric version of the hydrological year positions (1, 2, 3, ...)
# This numeric value will be used for the x-axis so that the shading can work properly.
GL_per_combined$hydro_year_num <- as.numeric(GL_per_combined$hydro_year)
# Create shading data frame using the numeric positions
shading_df_1 <- data.frame(
hydro_year_label = levels(GL_per_combined$hydro_year),
x = 1:length(levels(GL_per_combined$hydro_year))
)
shading_df_1$shade <- rep(c(TRUE, FALSE), length.out = nrow(shading_df_1))
shading_df_1 <- shading_df_1[shading_df_1$shade, ]
shading_df_1$xmin <- shading_df_1$x - 0.5
shading_df_1$xmax <- shading_df_1$x + 0.5
# Now plot using the numeric x position but re-label the x-axis accordingly.
ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL))
# Convert hydro_year to numeric before summarisation
GL_per_combined_1 <- GL_per_combined %>%
mutate(hydro_year = as.numeric(as.character(hydro_year)))
# Summarise data to get percentiles for ribbon plot
summary_data <- GL_per_combined_1 %>%
filter(NAME == "Heretaunga Plains") %>%
group_by(hydro_year) %>%
summarise(
p10 = quantile(percentile, 0.10, na.rm = TRUE),
p25 = quantile(percentile, 0.25, na.rm = TRUE),
p50 = quantile(percentile, 0.50, na.rm = TRUE),  # Median
p75 = quantile(percentile, 0.75, na.rm = TRUE),
p90 = quantile(percentile, 0.90, na.rm = TRUE)
)
# Option 2 - Create the ribbon plot
ggplot(summary_data, aes(x = hydro_year + 1)) +  # Shift x-axis forward by 1 year
geom_ribbon(aes(ymin = p25, ymax = p75, fill = "25th-75th Percentile"), alpha = 0.5) +
geom_ribbon(aes(ymin = p10, ymax = p90, fill = "10th-90th Percentile"), alpha = 0.3) +
geom_line(aes(y = p50, colour = "Median"), linewidth = 1.2) +
scale_fill_manual(values = c("25th-75th Percentile" = "#66c2a5", "10th-90th Percentile" = "#8da0cb")) +
scale_colour_manual(values = c("Median" = "black")) +
labs(
x = "Hydrological Year",
y = "Groundwater Level Percentile (%)",
fill = "Percentile Ranges",
colour = NULL
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
) +
scale_x_continuous(
breaks = summary_data$hydro_year + 1,  # Adjust breaks for new x-axis
labels = function(x) paste0(x - 1, "-", x)  # Correct "YYYY-YYYY" formatting
)
# Spatial processing ------------------------------------------------------
process_spatial_attributes <- function(data, basins, ema) {
data %>%
st_as_sf(coords = c("x", "y"), crs = 27200, remove = FALSE) %>%
st_transform(2193) %>%
mutate(
# Handle basin intersection with corrected column names
basin = st_intersects(., basins) %>%
as.data.frame() %>%
left_join(
basins %>%
st_drop_geometry() %>%
mutate(col_id = row_number()) %>%
select(col_id, NAME),
by = c("col.id" = "col_id")
) %>%
pull(NAME),
# Handle EMA intersection with corrected column names
ema = st_intersects(., ema) %>%
as.data.frame() %>%
left_join(
ema %>%
st_drop_geometry() %>%
mutate(col_id = row_number()) %>%
select(col_id, EMA),
by = c("col.id" = "col_id")
) %>%
pull(EMA)
) %>%
st_drop_geometry() %>%
group_by(well, x, y) %>%
summarize(
basin = first(na.omit(basin)),
ema = first(na.omit(ema)),
.groups = "drop"
)
}
WellStor_attributes <- WellStor %>%
select(well, x, y) %>%
process_spatial_attributes(allbasins, EMA_sf)
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL))
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL))
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
Boxplot
ls(theme())
library(ggplot2)
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL))
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL)) %>%
ggsave()
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL)) %>%
ggsave("Groundwater_Level_Percentile.png")
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
# Now plot using the numeric x position but re-label the x-axis accordingly.
Boxplot <- ggplot(GL_per_combined, aes(x = hydro_year_num, y = percentile, fill = NAME)) +
# Update the shading rectangle to extend only from y = 0 to 100 (or use -Inf if you prefer)
geom_rect(data = shading_df_1,
aes(xmin = xmin, xmax = xmax),
ymin = 0, ymax = 100,   # Changed ymax to 100 (and optionally ymin to 0)
fill = "grey70", alpha = 0.5, inherit.aes = FALSE) +
# Add boxplots with explicit grouping for each hydrological year and NAME
geom_boxplot(aes(group = interaction(hydro_year, NAME)),
color = "black", outlier.shape = NA) +
scale_fill_brewer(palette = "Paired") +
labs(x = "Hydrological Year", y = "Groundwater Level Percentile (%)") +
scale_x_continuous(breaks = 1:length(levels(GL_per_combined$hydro_year)),
labels = levels(GL_per_combined$hydro_year)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_legend(title = NULL))
ggsave(filename = "Groundwater_Level_Percentile.png", plot = plot, width = 10, height = 6, dpi = 300)
ggsave(filename = "Groundwater_Level_Percentile.png", plot = Boxplot, width = 10, height = 6, dpi = 300)
# Convert hydro_year to numeric before summarisation
GL_per_combined_1 <- GL_per_combined %>%
mutate(hydro_year = as.numeric(as.character(hydro_year)))
# Summarise data to get percentiles for ribbon plot
summary_data <- GL_per_combined_1 %>%
filter(NAME == "Heretaunga Plains") %>%
group_by(hydro_year) %>%
summarise(
p10 = quantile(percentile, 0.10, na.rm = TRUE),
p25 = quantile(percentile, 0.25, na.rm = TRUE),
p50 = quantile(percentile, 0.50, na.rm = TRUE),  # Median
p75 = quantile(percentile, 0.75, na.rm = TRUE),
p90 = quantile(percentile, 0.90, na.rm = TRUE)
)
# Option 2 - Create the ribbon plot
ggplot(summary_data, aes(x = hydro_year + 1)) +  # Shift x-axis forward by 1 year
geom_ribbon(aes(ymin = p25, ymax = p75, fill = "25th-75th Percentile"), alpha = 0.5) +
geom_ribbon(aes(ymin = p10, ymax = p90, fill = "10th-90th Percentile"), alpha = 0.3) +
geom_line(aes(y = p50, colour = "Median"), linewidth = 1.2) +
scale_fill_manual(values = c("25th-75th Percentile" = "#66c2a5", "10th-90th Percentile" = "#8da0cb")) +
scale_colour_manual(values = c("Median" = "black")) +
labs(
x = "Hydrological Year",
y = "Groundwater Level Percentile (%)",
fill = "Percentile Ranges",
colour = NULL
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
) +
scale_x_continuous(
breaks = summary_data$hydro_year + 1,  # Adjust breaks for new x-axis
labels = function(x) paste0(x - 1, "-", x)  # Correct "YYYY-YYYY" formatting
)
# Option 2 - Create the ribbon plot
Envelope <- ggplot(summary_data, aes(x = hydro_year + 1)) +  # Shift x-axis forward by 1 year
geom_ribbon(aes(ymin = p25, ymax = p75, fill = "25th-75th Percentile"), alpha = 0.5) +
geom_ribbon(aes(ymin = p10, ymax = p90, fill = "10th-90th Percentile"), alpha = 0.3) +
geom_line(aes(y = p50, colour = "Median"), linewidth = 1.2) +
scale_fill_manual(values = c("25th-75th Percentile" = "#66c2a5", "10th-90th Percentile" = "#8da0cb")) +
scale_colour_manual(values = c("Median" = "black")) +
labs(
x = "Hydrological Year",
y = "Groundwater Level Percentile (%)",
fill = "Percentile Ranges",
colour = NULL
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
) +
scale_x_continuous(
breaks = summary_data$hydro_year + 1,  # Adjust breaks for new x-axis
labels = function(x) paste0(x - 1, "-", x)  # Correct "YYYY-YYYY" formatting
)
ggsave(filename = "Percentile_envelope.png", plot = Envelope, width = 10, height = 6, dpi = 300)
ggsave(filename = "Percentile_boxplot.png", plot = Boxplot, width = 10, height = 6, dpi = 300)
map_sf_2021_2023_sea <- data_season_con %>%
ungroup() %>%
dplyr::filter(seayr %in% c(2021, 2022, 2023)) %>%
na.omit() %>%
mutate(con = fct_relevel(con, "Highest-ever","Above-normal","Normal","Below-normal", "Lowest-ever", )) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant") %>%
sf::st_transform(2193) %>%
sf::st_intersection(x=allbasins) %>%
dplyr::select(NAME, well, season,seayr,sea_gl,con) %>%
dplyr::mutate(year_year = paste(seayr, sep = ' / ')) %>%
dplyr::filter(NAME %in% c("Heretaunga Plains", "Ruataniwha Plains"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library(dplyr)
library(RODBC)
library(sf)
library(ggplot2)
library(forcats)
#library(lubridate)
#library(tidyverse)
#library (cowplot)
#library(EnvStats)
#library(sf)
#ibrary(here)
#ibrary(readr)
map_sf_2021_2023_sea <- data_season_con %>%
ungroup() %>%
dplyr::filter(seayr %in% c(2021, 2022, 2023)) %>%
na.omit() %>%
mutate(con = fct_relevel(con, "Highest-ever","Above-normal","Normal","Below-normal", "Lowest-ever", )) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant") %>%
sf::st_transform(2193) %>%
sf::st_intersection(x=allbasins) %>%
dplyr::select(NAME, well, season,seayr,sea_gl,con) %>%
dplyr::mutate(year_year = paste(seayr, sep = ' / ')) %>%
dplyr::filter(NAME %in% c("Heretaunga Plains", "Ruataniwha Plains"))
#Map
tmap::tmap_mode("plot")
#Here we define the background map for Hawke's Bay
Map_2021_2023_sea_facet_Rua <- tmap::tm_shape(RP_plains_sf)+
tmap::tm_fill()+
tmap::tm_shape(map_sf_2021_2023_sea)+
tmap::tm_dots(col = "con",
palette=c("Above-normal"='deepskyblue',
"Below-normal"='yellow',
"Highest-ever"='blue',
"Lowest-ever"='red',
"Normal"='chartreuse4'),
#title=unique(allData_sf2$month),
title= " ",
stretch.palette = FALSE,
size = 1,
shape =21,
clustering = FALSE,
legend.show = T,
legend.is.portrait = F)+
tmap::tm_facets(c("year_year","season"),free.coords = FALSE)+
tmap::tm_layout(legend.outside = T,
legend.outside.position = "bottom",
legend.position = c(0.1,0.4),
legend.outside.size = 0.15,
legend.text.size = 2)
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "Map_2021_2023_sea_facet_Rua.png")
map_sf_2021_2023_sea <- data_season_con %>%
ungroup() %>%
dplyr::filter(seayr %in% c(2021, 2022, 2023)) %>%
na.omit() %>%
mutate(con = fct_relevel(con, "Highest-ever","Above-normal","Normal","Below-normal", "Lowest-ever", )) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant") %>%
sf::st_transform(2193) %>%
sf::st_intersection(x=allbasins) %>%
dplyr::select(NAME, well, season,seayr,sea_gl,con) %>%
dplyr::mutate(year_year = paste(seayr, sep = ' / ')) %>%
dplyr::filter(NAME %in% c("Heretaunga Plains", "Ruataniwha Plains"))
#Map
tmap::tmap_mode("plot")
#Here we define the background map for Hawke's Bay
Map_2021_2023_sea_facet_Rua <- tmap::tm_shape(RP_plains_sf)+
tmap::tm_fill()+
tmap::tm_shape(map_sf_2021_2023_sea)+
tmap::tm_dots(col = "con",
palette=c("Above-normal"='deepskyblue',
"Below-normal"='yellow',
"Highest-ever"='blue',
"Lowest-ever"='red',
"Normal"='chartreuse4'),
#title=unique(allData_sf2$month),
title= " ",
stretch.palette = FALSE,
size = 1,
shape =21,
clustering = FALSE,
legend.show = T,
legend.is.portrait = F)+
tmap::tm_facets(c("year_year","season"),free.coords = FALSE)+
tmap::tm_layout(legend.outside = T,
legend.outside.position = "bottom",
legend.position = c(0.1,0.4),
legend.outside.size = 0.15,
legend.text.size = 2)
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "Map_2021_2023_sea_facet_Rua.png")
tmap_save(Map_2021_2023_sea_facet_Rua, file.path("3_State_analysis", "Map_2021_2023_sea_facet_Rua.png"))
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, file.path("3_State_analysis", "Map_2021_2023_sea_facet_Rua.png"))
dir.create("3_State_analysis", recursive = TRUE, showWarnings = FALSE)
tmap_save(Map_2021_2023_sea_facet_Rua, file.path("3_State_analysis", "Map_2021_2023_sea_facet_Rua.png"))
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, file.path("3_State_analysis", "Map_2021_2023_sea_facet_Rua.png"))
library(tmap)
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "Map_2021_2023_sea_facet_Rua.png")
# Ensure the folder exists before saving
dir.create("3_State_analysis", recursive = TRUE, showWarnings = FALSE)
# Save the tmap plot in the correct folder
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, file.path("3_State_analysis", "Map_2021_2023_sea_facet_Rua.png"))
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "Map_2021_2023_sea_facet_Rua.png")
getwd()
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "RscriptGWL/3_State_analysis/Map_2021_2023_sea_facet_Rua.png")
dir.create("RscriptGWL/3_State_analysis", recursive = TRUE, showWarnings = FALSE)
dir.create("RscriptGWL/3_State_analysis", recursive = TRUE, showWarnings = FALSE)
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "/RscriptGWL/3_State_analysis/Map_2021_2023_sea_facet_Rua.png")
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, ".RscriptGWL/3_State_analysis/Map_2021_2023_sea_facet_Rua.png")
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "..RscriptGWL/3_State_analysis/Map_2021_2023_sea_facet_Rua.png")
getwd()
tmap::tmap_save(Map_2021_2023_sea_facet_Rua, "../3_State_analysis/Map_2021_2023_sea_facet_Rua.png")
#Obtain data for plotting
Envelope_data <- data_set_com3 %>%
group_by(well, month) %>%
mutate(minGL= min(GL, na.rm = TRUE),
maxGL = max(GL, na.rm = TRUE),
Q20 = quantile(GL,0.2, na.rm=TRUE),
Q80 = quantile(GL,0.8, na.rm=TRUE)) %>%
filter(my_month>="2018/07/01")
######
df <- Envelope_data
plot_per_well <- function(well_ids){
df_well <- df %>%
dplyr::filter(well == well_ids) #Use the name "hello" - but any name will work
g <- ggplot(df_well, aes(x=my_month, y=GL)) +
geom_ribbon(aes(ymin=minGL,ymax=maxGL, fill = "Above/Below\nnormal range" ),alpha=0.5)+
geom_ribbon(aes(ymin=Q20,ymax=Q80, fill = "Normal range\n(20-80th percentile)"),alpha=1)+
scale_fill_manual(values = c("dodgerblue4",
"lightskyblue"))+
geom_line(aes(x=my_month, y=GL, lty = "Groundwater\nLevel"), color = "black", size = 0.5)+
scale_linetype_manual(values=c("dashed"))+
labs(x = "Year",
y = "Groundwater levels (m)",
fill = " ")+
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank())+
facet_wrap(~well, scales = "free")#+
#ggtitle(well_ids)
plots_dir <- "C:/Users/simon/Hawkes Bay Regional Council/Environmental Science - General/Hydrology and Groundwater projects/2120_Groundwater_Quantity/SoE_technical_reports/2023-2024/R_Script/3_State_analysis/Envelope_plots/"
cowplot::save_plot(paste0(plots_dir, well_ids, ".png" , sep =""), g)
#save_plot(paste0(well_ids, ".png" , sep =""), g)
print(paste0("generating plot for well " , well_ids))
}
