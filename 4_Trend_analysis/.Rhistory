ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
#1994-2014
MK_SV_1994_2014_1 <- GL1994_2014 %>%
group_by(well) %>%
summarise(
# Aug to Feb Difference Analysis
n_observations1 = sum(!is.na(aug_feb_diff)), # Count non-NA observations for aug_feb_diff
tau1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
#2004-2024
MK_SV_2004_2024_1 <- GL2004_2024 %>%
group_by(well) %>%
summarise(
# Aug to Feb Difference Analysis
n_observations1 = sum(!is.na(aug_feb_diff)), # Count non-NA observations for aug_feb_diff
tau1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
# 30 year interval
#1994-2024
MK_SV_1994_2024_1 <- GL1994_2024 %>%
group_by(well) %>%
summarise(
# Aug to Feb Difference Analysis
n_observations1 = sum(!is.na(aug_feb_diff)), # Count non-NA observations for aug_feb_diff
tau1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
#1984-2014
MK_SV_1984_2014_1 <- GL1984_2014 %>%
group_by(well) %>%
summarise(
# Aug to Feb Difference Analysis
n_observations1 = sum(!is.na(aug_feb_diff)), # Count non-NA observations for aug_feb_diff
tau1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
# 40 year interval
#1984-2024
MK_SV_1984_2024_1 <- GL1984_2024 %>%
group_by(well) %>%
summarise(
# Aug to Feb Difference Analysis
n_observations1 = sum(!is.na(aug_feb_diff)), # Count non-NA observations for aug_feb_diff
tau1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper1 = if (n_observations1 >= 3) tryCatch(kendallTrendTest(aug_feb_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA,
# Max to Min Difference Analysis
n_observations2 = sum(!is.na(max_min_diff)), # Count non-NA observations for max_min_diff
tau2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"], error = function(e) NA) else NA,
p_value2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value, error = function(e) NA) else NA,
sen_slope2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"], error = function(e) NA) else NA,
intercept2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"], error = function(e) NA) else NA,
z_statistic2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"], error = function(e) NA) else NA,
ci_lower2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1], error = function(e) NA) else NA,
ci_upper2 = if (n_observations2 >= 3) tryCatch(kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2], error = function(e) NA) else NA
) %>%
mutate(
significance_value1 = ifelse(!is.na(p_value1) & p_value1 >= 0.05, "non-sig", "sig"),
significance_value2 = ifelse(!is.na(p_value2) & p_value2 >= 0.05, "non-sig", "sig"),
direction1 = ifelse(!is.na(tau1) & tau1 > 0, "positive", ifelse(!is.na(tau1) & tau1 < 0, "negative", "no trend")),
direction2 = ifelse(!is.na(tau2) & tau2 > 0, "positive", ifelse(!is.na(tau2) & tau2 < 0, "negative", "no trend"))
)
#Combine results
#10year
MK_SV_1984_1994$period="1984_1994"
MK_SV_1994_2004$period="1994_2004"
MK_SV_2004_2014$period="2004_2014"
MK_SV_2014_2024$period="2014_2024"
#20year
MK_SV_1984_2004$period="1984_2004"
MK_SV_1994_2014$period="1994_2014"
MK_SV_2004_2024$period="2004_2024"
#30year
MK_SV_1984_2014$period="1984_2014"
MK_SV_1994_2024$period="1994_2024"
#40year
MK_SV_1984_2024$period="1984_2024"
#full
MK_all_SV$period="Full"
MK_SV_combined <- rbind(
#10yr
MK_SV_1984_1994,
MK_SV_1994_2004,
MK_SV_2004_2014,
MK_SV_2014_2024,
#20yr
MK_SV_1984_2004,
MK_SV_1994_2014,
MK_SV_2004_2024,
#30yr
MK_SV_1984_2014,
MK_SV_1994_2024,
#40yr
MK_SV_1984_2024,
#All
MK_all_SV
) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant", remove=FALSE) %>%
sf::st_transform(2193)
selection <- MK_SV_combined %>%
dplyr::select(well, x, y) %>%
distinct() %>% # this part minimises the number of records needed for st_intersection
sf::st_intersection(x=allbasins) %>%
#sf::st_intersection(x=SoE_FMUs) %>%
sf::st_drop_geometry()
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas"))) %>%
mutate(sig_1 = case_when(
significance_value1 == "non-sig" ~ "non-sig",
direction1 == "positive" ~ "positive",
direction1 == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_1 = factor(sig_1, levels = c("positive", "negative", "non-sig", "check"))) %>%
mutate(sig_2 = case_when(
significance_value2 == "non-sig" ~ "non-sig",
direction2 == "positive" ~ "positive",
direction2 == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_2 = factor(sig_2, levels = c("positive", "negative", "non-sig", "check")))
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas"))) %>%
mutate(sig_1 = case_when(
significance_value1 == "non-sig" ~ "non-sig",
direction1 == "positive" ~ "positive",
direction1 == "negative" ~ "negative",
TRUE ~ "check"
))# %>%
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas")))# %>%
View(MK_SV_combined_1)
# Function to run Kendall tests for Seasonal Variation (SV)
# Function to run Kendall tests for Seasonal Variation (SV) using only max_min_diff
run_kendall_SV <- function(data) {
results <- data %>%
group_by(well) %>%
summarise(
# Max to Min Difference Analysis
n_obs_maxmin = sum(!is.na(max_min_diff)),
tau_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["tau"],
error = function(e) NA
) else NA,
p_value_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$p.value,
error = function(e) NA
) else NA,
sen_slope_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["slope"],
error = function(e) NA
) else NA,
intercept_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$estimate["intercept"],
error = function(e) NA
) else NA,
z_stat_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$statistic["z"],
error = function(e) NA
) else NA,
ci_lower_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[1],
error = function(e) NA
) else NA,
ci_upper_maxmin = if (n_obs_maxmin >= 3) tryCatch(
kendallTrendTest(max_min_diff, alternative = "two.sided")$interval$limits[2],
error = function(e) NA
) else NA
) %>%
mutate(
significance_maxmin = ifelse(!is.na(p_value_maxmin) & p_value_maxmin >= 0.05, "non-sig", "sig"),
direction_maxmin = ifelse(!is.na(tau_maxmin) & tau_maxmin > 0, "positive",
ifelse(!is.na(tau_maxmin) & tau_maxmin < 0, "negative", "no trend"))
)
return(results)
}
# Run Kendall trend tests for Seasonal Variation (SV) for all periods
MK_all_SV         <- run_kendall_SV(All_GL1)
MK_SV_1984_1994   <- run_kendall_SV(GL1984_1994)
MK_SV_1994_2004   <- run_kendall_SV(GL1994_2004)
MK_SV_2004_2014   <- run_kendall_SV(GL2004_2014)
MK_SV_2014_2024   <- run_kendall_SV(GL2014_2024)
MK_SV_1984_2004   <- run_kendall_SV(GL1984_2004)
MK_SV_1994_2014   <- run_kendall_SV(GL1994_2014)
MK_SV_2004_2024   <- run_kendall_SV(GL2004_2024)
MK_SV_1994_2024   <- run_kendall_SV(GL1994_2024)
MK_SV_1984_2014   <- run_kendall_SV(GL1984_2014)
MK_SV_1984_2024   <- run_kendall_SV(GL1984_2024)
#Combine results
#10year
MK_SV_1984_1994$period="1984_1994"
MK_SV_1994_2004$period="1994_2004"
MK_SV_2004_2014$period="2004_2014"
MK_SV_2014_2024$period="2014_2024"
#20year
MK_SV_1984_2004$period="1984_2004"
MK_SV_1994_2014$period="1994_2014"
MK_SV_2004_2024$period="2004_2024"
#30year
MK_SV_1984_2014$period="1984_2014"
MK_SV_1994_2024$period="1994_2024"
#40year
MK_SV_1984_2024$period="1984_2024"
#full
MK_all_SV$period="Full"
MK_SV_combined <- rbind(
#10yr
MK_SV_1984_1994,
MK_SV_1994_2004,
MK_SV_2004_2014,
MK_SV_2014_2024,
#20yr
MK_SV_1984_2004,
MK_SV_1994_2014,
MK_SV_2004_2024,
#30yr
MK_SV_1984_2014,
MK_SV_1994_2024,
#40yr
MK_SV_1984_2024,
#All
MK_all_SV
) %>%
left_join(WellStor) %>%
sf::st_as_sf(coords = c("x","y"),crs = 27200,agr="constant", remove=FALSE) %>%
sf::st_transform(2193)
selection <- MK_SV_combined %>%
dplyr::select(well, x, y) %>%
distinct() %>% # this part minimises the number of records needed for st_intersection
sf::st_intersection(x=allbasins) %>%
#sf::st_intersection(x=SoE_FMUs) %>%
sf::st_drop_geometry()
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas")))# %>%
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas"))) %>%
mutate(sig_1 = case_when(
significance_maxmin == "non-sig" ~ "non-sig",
direction_maxmin == "positive" ~ "positive",
direction_maxmin == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_1 = factor(sig_1, levels = c("positive", "negative", "non-sig", "check"))) %>%
mutate(sig_2 = case_when(
significance_value2 == "non-sig" ~ "non-sig",
direction2 == "positive" ~ "positive",
direction2 == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_2 = factor(sig_2, levels = c("positive", "negative", "non-sig", "check")))
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Other areas"))) %>%
mutate(sig_1 = case_when(
significance_maxmin == "non-sig" ~ "non-sig",
direction_maxmin == "positive" ~ "positive",
direction_maxmin == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_1 = factor(sig_1, levels = c("positive", "negative", "non-sig", "check")))
View(selection)
View(MK_SV_combined)
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry()# %>%
View(MK_SV_combined_1)
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME)# %>%
MK_SV_combined_1 <- MK_SV_combined %>%
dplyr::left_join(., selection) %>%
sf::st_as_sf(coords = c("Easting", "Northing"), crs = 2193, agr = "constant", remove = FALSE) %>%
# If you need geometry, keep the sf conversion; if not, remove st_drop_geometry() or skip the sf conversion entirely
sf::st_drop_geometry() %>%
dplyr::rename(area = NAME) %>%
mutate(period = factor(period, levels = c(
"Full",
"1984_1994",
"1994_2004",
"2004_2014",
"2014_2024",
"1984_2004",
"1994_2014",
"2004_2024",
"1984_2014",
"1994_2024",
"1984_2024"
))) %>%
mutate(area = factor(area, levels = c("Heretaunga Plains", "Ruataniwha Plains", "Minor aquifers"))) %>%
mutate(sig_1 = case_when(
significance_maxmin == "non-sig" ~ "non-sig",
direction_maxmin == "positive" ~ "positive",
direction_maxmin == "negative" ~ "negative",
TRUE ~ "check"
)) %>%
mutate(sig_1 = factor(sig_1, levels = c("positive", "negative", "non-sig", "check")))
